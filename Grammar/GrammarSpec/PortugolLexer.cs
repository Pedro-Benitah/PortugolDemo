//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./GrammarSpec/Portugol.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PortugolLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PROGRAMA=1, INICIO=2, FIM=3, FIMPROGRAMA=4, SE=5, ENTAO=6, SENAO=7, ENQUANTO=8, 
		FACA=9, FIMENQUANTO=10, PARA=11, DE=12, ATE=13, PASSO=14, FIMPARA=15, 
		ESCREVA=16, E=17, OU=18, NAO=19, INTEIRO=20, REAL=21, LOGICO=22, TEXTO=23, 
		BOOL_LITERAL=24, NUM_LITERAL=25, STRING_LITERAL=26, EQEQ=27, NEQ=28, GE=29, 
		LE=30, GT=31, LT=32, EQUAL=33, PLUS=34, MINUS=35, MULT=36, DIV=37, LPAREN=38, 
		RPAREN=39, SEMI=40, COMMA=41, ID=42, WS=43, COMMENT=44, BLOCK_COMMENT=45;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"PROGRAMA", "INICIO", "FIM", "FIMPROGRAMA", "SE", "ENTAO", "SENAO", "ENQUANTO", 
		"FACA", "FIMENQUANTO", "PARA", "DE", "ATE", "PASSO", "FIMPARA", "ESCREVA", 
		"E", "OU", "NAO", "INTEIRO", "REAL", "LOGICO", "TEXTO", "BOOL_LITERAL", 
		"NUM_LITERAL", "STRING_LITERAL", "EQEQ", "NEQ", "GE", "LE", "GT", "LT", 
		"EQUAL", "PLUS", "MINUS", "MULT", "DIV", "LPAREN", "RPAREN", "SEMI", "COMMA", 
		"ID", "WS", "COMMENT", "BLOCK_COMMENT", "LETRA", "DIGITO"
	};


	public PortugolLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PortugolLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'programa'", "'inicio'", "'fim'", "'fimPrograma'", "'se'", "'entao'", 
		"'senao'", "'enquanto'", "'faca'", "'fimEnquanto'", "'para'", "'de'", 
		"'ate'", "'passo'", "'fimPara'", "'escreva'", "'e'", "'ou'", "'nao'", 
		"'inteiro'", "'real'", "'logico'", "'texto'", null, null, null, "'=='", 
		"'!='", "'>='", "'<='", "'>'", "'<'", "'='", "'+'", "'-'", "'*'", "'/'", 
		"'('", "')'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PROGRAMA", "INICIO", "FIM", "FIMPROGRAMA", "SE", "ENTAO", "SENAO", 
		"ENQUANTO", "FACA", "FIMENQUANTO", "PARA", "DE", "ATE", "PASSO", "FIMPARA", 
		"ESCREVA", "E", "OU", "NAO", "INTEIRO", "REAL", "LOGICO", "TEXTO", "BOOL_LITERAL", 
		"NUM_LITERAL", "STRING_LITERAL", "EQEQ", "NEQ", "GE", "LE", "GT", "LT", 
		"EQUAL", "PLUS", "MINUS", "MULT", "DIV", "LPAREN", "RPAREN", "SEMI", "COMMA", 
		"ID", "WS", "COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Portugol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PortugolLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,45,356,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
		1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
		1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,253,8,23,1,
		24,4,24,256,8,24,11,24,12,24,257,1,24,1,24,4,24,262,8,24,11,24,12,24,263,
		3,24,266,8,24,1,25,1,25,1,25,1,25,5,25,272,8,25,10,25,12,25,275,9,25,1,
		25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,
		30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,
		37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,5,41,316,8,41,10,
		41,12,41,319,9,41,1,42,4,42,322,8,42,11,42,12,42,323,1,42,1,42,1,43,1,
		43,1,43,1,43,5,43,332,8,43,10,43,12,43,335,9,43,1,43,1,43,1,44,1,44,1,
		44,1,44,5,44,343,8,44,10,44,12,44,346,9,44,1,44,1,44,1,44,1,44,1,44,1,
		45,1,45,1,46,1,46,1,344,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
		10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
		22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
		34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
		0,93,0,1,0,5,2,0,34,34,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,3,0,
		65,90,95,95,97,122,1,0,48,57,364,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
		7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
		0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
		29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
		0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
		0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,95,1,0,0,0,3,104,1,0,
		0,0,5,111,1,0,0,0,7,115,1,0,0,0,9,127,1,0,0,0,11,130,1,0,0,0,13,136,1,
		0,0,0,15,142,1,0,0,0,17,151,1,0,0,0,19,156,1,0,0,0,21,168,1,0,0,0,23,173,
		1,0,0,0,25,176,1,0,0,0,27,180,1,0,0,0,29,186,1,0,0,0,31,194,1,0,0,0,33,
		202,1,0,0,0,35,204,1,0,0,0,37,207,1,0,0,0,39,211,1,0,0,0,41,219,1,0,0,
		0,43,224,1,0,0,0,45,231,1,0,0,0,47,252,1,0,0,0,49,255,1,0,0,0,51,267,1,
		0,0,0,53,278,1,0,0,0,55,281,1,0,0,0,57,284,1,0,0,0,59,287,1,0,0,0,61,290,
		1,0,0,0,63,292,1,0,0,0,65,294,1,0,0,0,67,296,1,0,0,0,69,298,1,0,0,0,71,
		300,1,0,0,0,73,302,1,0,0,0,75,304,1,0,0,0,77,306,1,0,0,0,79,308,1,0,0,
		0,81,310,1,0,0,0,83,312,1,0,0,0,85,321,1,0,0,0,87,327,1,0,0,0,89,338,1,
		0,0,0,91,352,1,0,0,0,93,354,1,0,0,0,95,96,5,112,0,0,96,97,5,114,0,0,97,
		98,5,111,0,0,98,99,5,103,0,0,99,100,5,114,0,0,100,101,5,97,0,0,101,102,
		5,109,0,0,102,103,5,97,0,0,103,2,1,0,0,0,104,105,5,105,0,0,105,106,5,110,
		0,0,106,107,5,105,0,0,107,108,5,99,0,0,108,109,5,105,0,0,109,110,5,111,
		0,0,110,4,1,0,0,0,111,112,5,102,0,0,112,113,5,105,0,0,113,114,5,109,0,
		0,114,6,1,0,0,0,115,116,5,102,0,0,116,117,5,105,0,0,117,118,5,109,0,0,
		118,119,5,80,0,0,119,120,5,114,0,0,120,121,5,111,0,0,121,122,5,103,0,0,
		122,123,5,114,0,0,123,124,5,97,0,0,124,125,5,109,0,0,125,126,5,97,0,0,
		126,8,1,0,0,0,127,128,5,115,0,0,128,129,5,101,0,0,129,10,1,0,0,0,130,131,
		5,101,0,0,131,132,5,110,0,0,132,133,5,116,0,0,133,134,5,97,0,0,134,135,
		5,111,0,0,135,12,1,0,0,0,136,137,5,115,0,0,137,138,5,101,0,0,138,139,5,
		110,0,0,139,140,5,97,0,0,140,141,5,111,0,0,141,14,1,0,0,0,142,143,5,101,
		0,0,143,144,5,110,0,0,144,145,5,113,0,0,145,146,5,117,0,0,146,147,5,97,
		0,0,147,148,5,110,0,0,148,149,5,116,0,0,149,150,5,111,0,0,150,16,1,0,0,
		0,151,152,5,102,0,0,152,153,5,97,0,0,153,154,5,99,0,0,154,155,5,97,0,0,
		155,18,1,0,0,0,156,157,5,102,0,0,157,158,5,105,0,0,158,159,5,109,0,0,159,
		160,5,69,0,0,160,161,5,110,0,0,161,162,5,113,0,0,162,163,5,117,0,0,163,
		164,5,97,0,0,164,165,5,110,0,0,165,166,5,116,0,0,166,167,5,111,0,0,167,
		20,1,0,0,0,168,169,5,112,0,0,169,170,5,97,0,0,170,171,5,114,0,0,171,172,
		5,97,0,0,172,22,1,0,0,0,173,174,5,100,0,0,174,175,5,101,0,0,175,24,1,0,
		0,0,176,177,5,97,0,0,177,178,5,116,0,0,178,179,5,101,0,0,179,26,1,0,0,
		0,180,181,5,112,0,0,181,182,5,97,0,0,182,183,5,115,0,0,183,184,5,115,0,
		0,184,185,5,111,0,0,185,28,1,0,0,0,186,187,5,102,0,0,187,188,5,105,0,0,
		188,189,5,109,0,0,189,190,5,80,0,0,190,191,5,97,0,0,191,192,5,114,0,0,
		192,193,5,97,0,0,193,30,1,0,0,0,194,195,5,101,0,0,195,196,5,115,0,0,196,
		197,5,99,0,0,197,198,5,114,0,0,198,199,5,101,0,0,199,200,5,118,0,0,200,
		201,5,97,0,0,201,32,1,0,0,0,202,203,5,101,0,0,203,34,1,0,0,0,204,205,5,
		111,0,0,205,206,5,117,0,0,206,36,1,0,0,0,207,208,5,110,0,0,208,209,5,97,
		0,0,209,210,5,111,0,0,210,38,1,0,0,0,211,212,5,105,0,0,212,213,5,110,0,
		0,213,214,5,116,0,0,214,215,5,101,0,0,215,216,5,105,0,0,216,217,5,114,
		0,0,217,218,5,111,0,0,218,40,1,0,0,0,219,220,5,114,0,0,220,221,5,101,0,
		0,221,222,5,97,0,0,222,223,5,108,0,0,223,42,1,0,0,0,224,225,5,108,0,0,
		225,226,5,111,0,0,226,227,5,103,0,0,227,228,5,105,0,0,228,229,5,99,0,0,
		229,230,5,111,0,0,230,44,1,0,0,0,231,232,5,116,0,0,232,233,5,101,0,0,233,
		234,5,120,0,0,234,235,5,116,0,0,235,236,5,111,0,0,236,46,1,0,0,0,237,238,
		5,118,0,0,238,239,5,101,0,0,239,240,5,114,0,0,240,241,5,100,0,0,241,242,
		5,97,0,0,242,243,5,100,0,0,243,244,5,101,0,0,244,245,5,105,0,0,245,246,
		5,114,0,0,246,253,5,111,0,0,247,248,5,102,0,0,248,249,5,97,0,0,249,250,
		5,108,0,0,250,251,5,115,0,0,251,253,5,111,0,0,252,237,1,0,0,0,252,247,
		1,0,0,0,253,48,1,0,0,0,254,256,3,93,46,0,255,254,1,0,0,0,256,257,1,0,0,
		0,257,255,1,0,0,0,257,258,1,0,0,0,258,265,1,0,0,0,259,261,5,46,0,0,260,
		262,3,93,46,0,261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,
		1,0,0,0,264,266,1,0,0,0,265,259,1,0,0,0,265,266,1,0,0,0,266,50,1,0,0,0,
		267,273,5,34,0,0,268,272,8,0,0,0,269,270,5,92,0,0,270,272,9,0,0,0,271,
		268,1,0,0,0,271,269,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,
		0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,5,34,0,0,277,52,1,0,0,0,
		278,279,5,61,0,0,279,280,5,61,0,0,280,54,1,0,0,0,281,282,5,33,0,0,282,
		283,5,61,0,0,283,56,1,0,0,0,284,285,5,62,0,0,285,286,5,61,0,0,286,58,1,
		0,0,0,287,288,5,60,0,0,288,289,5,61,0,0,289,60,1,0,0,0,290,291,5,62,0,
		0,291,62,1,0,0,0,292,293,5,60,0,0,293,64,1,0,0,0,294,295,5,61,0,0,295,
		66,1,0,0,0,296,297,5,43,0,0,297,68,1,0,0,0,298,299,5,45,0,0,299,70,1,0,
		0,0,300,301,5,42,0,0,301,72,1,0,0,0,302,303,5,47,0,0,303,74,1,0,0,0,304,
		305,5,40,0,0,305,76,1,0,0,0,306,307,5,41,0,0,307,78,1,0,0,0,308,309,5,
		59,0,0,309,80,1,0,0,0,310,311,5,44,0,0,311,82,1,0,0,0,312,317,3,91,45,
		0,313,316,3,91,45,0,314,316,3,93,46,0,315,313,1,0,0,0,315,314,1,0,0,0,
		316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,84,1,0,0,0,319,317,
		1,0,0,0,320,322,7,1,0,0,321,320,1,0,0,0,322,323,1,0,0,0,323,321,1,0,0,
		0,323,324,1,0,0,0,324,325,1,0,0,0,325,326,6,42,0,0,326,86,1,0,0,0,327,
		328,5,47,0,0,328,329,5,47,0,0,329,333,1,0,0,0,330,332,8,2,0,0,331,330,
		1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,
		0,335,333,1,0,0,0,336,337,6,43,0,0,337,88,1,0,0,0,338,339,5,47,0,0,339,
		340,5,42,0,0,340,344,1,0,0,0,341,343,9,0,0,0,342,341,1,0,0,0,343,346,1,
		0,0,0,344,345,1,0,0,0,344,342,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,
		347,348,5,42,0,0,348,349,5,47,0,0,349,350,1,0,0,0,350,351,6,44,0,0,351,
		90,1,0,0,0,352,353,7,3,0,0,353,92,1,0,0,0,354,355,7,4,0,0,355,94,1,0,0,
		0,12,0,252,257,263,265,271,273,315,317,323,333,344,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
