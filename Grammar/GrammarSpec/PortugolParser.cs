//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./GrammarSpec/Portugol.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PortugolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PROGRAMA=1, INICIO=2, FIM=3, FIMPROGRAMA=4, SE=5, ENTAO=6, SENAO=7, ENQUANTO=8, 
		FACA=9, FIMENQUANTO=10, PARA=11, DE=12, ATE=13, PASSO=14, FIMPARA=15, 
		ESCREVA=16, E=17, OU=18, NAO=19, INTEIRO=20, REAL=21, LOGICO=22, TEXTO=23, 
		BOOL_LITERAL=24, NUM_LITERAL=25, STRING_LITERAL=26, EQEQ=27, NEQ=28, GE=29, 
		LE=30, GT=31, LT=32, EQUAL=33, PLUS=34, MINUS=35, MULT=36, DIV=37, LPAREN=38, 
		RPAREN=39, SEMI=40, COMMA=41, ID=42, WS=43, COMMENT=44, BLOCK_COMMENT=45;
	public const int
		RULE_programa = 0, RULE_blocoPrincipal = 1, RULE_declaracoes = 2, RULE_declaracao = 3, 
		RULE_tipo = 4, RULE_comandos = 5, RULE_comando = 6, RULE_atribuicao = 7, 
		RULE_comandoCondicional = 8, RULE_comandoEnquanto = 9, RULE_comandoPara = 10, 
		RULE_comandoSaida = 11, RULE_blocoComandos = 12, RULE_expr = 13, RULE_exprLogica = 14, 
		RULE_exprRelacional = 15, RULE_exprAritmetica = 16, RULE_termo = 17, RULE_fator = 18;
	public static readonly string[] ruleNames = {
		"programa", "blocoPrincipal", "declaracoes", "declaracao", "tipo", "comandos", 
		"comando", "atribuicao", "comandoCondicional", "comandoEnquanto", "comandoPara", 
		"comandoSaida", "blocoComandos", "expr", "exprLogica", "exprRelacional", 
		"exprAritmetica", "termo", "fator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'programa'", "'inicio'", "'fim'", "'fimPrograma'", "'se'", "'entao'", 
		"'senao'", "'enquanto'", "'faca'", "'fimEnquanto'", "'para'", "'de'", 
		"'ate'", "'passo'", "'fimPara'", "'escreva'", "'e'", "'ou'", "'nao'", 
		"'inteiro'", "'real'", "'logico'", "'texto'", null, null, null, "'=='", 
		"'!='", "'>='", "'<='", "'>'", "'<'", "'='", "'+'", "'-'", "'*'", "'/'", 
		"'('", "')'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PROGRAMA", "INICIO", "FIM", "FIMPROGRAMA", "SE", "ENTAO", "SENAO", 
		"ENQUANTO", "FACA", "FIMENQUANTO", "PARA", "DE", "ATE", "PASSO", "FIMPARA", 
		"ESCREVA", "E", "OU", "NAO", "INTEIRO", "REAL", "LOGICO", "TEXTO", "BOOL_LITERAL", 
		"NUM_LITERAL", "STRING_LITERAL", "EQEQ", "NEQ", "GE", "LE", "GT", "LT", 
		"EQUAL", "PLUS", "MINUS", "MULT", "DIV", "LPAREN", "RPAREN", "SEMI", "COMMA", 
		"ID", "WS", "COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Portugol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PortugolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PortugolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PortugolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAMA() { return GetToken(PortugolParser.PROGRAMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PortugolParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PortugolParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PortugolParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoPrincipalContext blocoPrincipal() {
			return GetRuleContext<BlocoPrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIMPROGRAMA() { return GetToken(PortugolParser.FIMPROGRAMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PortugolParser.Eof, 0); }
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(PROGRAMA);
			State = 39;
			Match(ID);
			State = 40;
			Match(LPAREN);
			State = 41;
			Match(RPAREN);
			State = 42;
			blocoPrincipal();
			State = 43;
			Match(FIMPROGRAMA);
			State = 44;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocoPrincipalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INICIO() { return GetToken(PortugolParser.INICIO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComandosContext comandos() {
			return GetRuleContext<ComandosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIM() { return GetToken(PortugolParser.FIM, 0); }
		public BlocoPrincipalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocoPrincipal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterBlocoPrincipal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitBlocoPrincipal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocoPrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocoPrincipalContext blocoPrincipal() {
		BlocoPrincipalContext _localctx = new BlocoPrincipalContext(Context, State);
		EnterRule(_localctx, 2, RULE_blocoPrincipal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(INICIO);
			State = 47;
			comandos();
			State = 48;
			Match(FIM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracoesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracaoContext[] declaracao() {
			return GetRuleContexts<DeclaracaoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracaoContext declaracao(int i) {
			return GetRuleContext<DeclaracaoContext>(i);
		}
		public DeclaracoesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracoes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterDeclaracoes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitDeclaracoes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracoes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracoesContext declaracoes() {
		DeclaracoesContext _localctx = new DeclaracoesContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaracoes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 50;
				declaracao();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 15728640L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PortugolParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PortugolParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PortugolParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclaracaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterDeclaracao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitDeclaracao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracaoContext declaracao() {
		DeclaracaoContext _localctx = new DeclaracaoContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaracao);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			tipo();
			State = 56;
			Match(ID);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 57;
				Match(EQUAL);
				State = 58;
				expr();
				}
			}

			State = 61;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEIRO() { return GetToken(PortugolParser.INTEIRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(PortugolParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICO() { return GetToken(PortugolParser.LOGICO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTO() { return GetToken(PortugolParser.TEXTO, 0); }
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 8, RULE_tipo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15728640L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracaoContext[] declaracao() {
			return GetRuleContexts<DeclaracaoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracaoContext declaracao(int i) {
			return GetRuleContext<DeclaracaoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		public ComandosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comandos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterComandos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitComandos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComandos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandosContext comandos() {
		ComandosContext _localctx = new ComandosContext(Context, State);
		EnterRule(_localctx, 10, RULE_comandos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 67;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTEIRO:
				case REAL:
				case LOGICO:
				case TEXTO:
					{
					State = 65;
					declaracao();
					}
					break;
				case SE:
				case ENQUANTO:
				case PARA:
				case ESCREVA:
				case ID:
					{
					State = 66;
					comando();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398062307616L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtribuicaoContext atribuicao() {
			return GetRuleContext<AtribuicaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PortugolParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComandoCondicionalContext comandoCondicional() {
			return GetRuleContext<ComandoCondicionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoEnquantoContext comandoEnquanto() {
			return GetRuleContext<ComandoEnquantoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoParaContext comandoPara() {
			return GetRuleContext<ComandoParaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoSaidaContext comandoSaida() {
			return GetRuleContext<ComandoSaidaContext>(0);
		}
		public ComandoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comando; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterComando(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitComando(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComando(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandoContext comando() {
		ComandoContext _localctx = new ComandoContext(Context, State);
		EnterRule(_localctx, 12, RULE_comando);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				atribuicao();
				State = 72;
				Match(SEMI);
				}
				break;
			case SE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				comandoCondicional();
				}
				break;
			case ENQUANTO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75;
				comandoEnquanto();
				}
				break;
			case PARA:
				EnterOuterAlt(_localctx, 4);
				{
				State = 76;
				comandoPara();
				}
				break;
			case ESCREVA:
				EnterOuterAlt(_localctx, 5);
				{
				State = 77;
				comandoSaida();
				State = 78;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribuicaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PortugolParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PortugolParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AtribuicaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atribuicao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterAtribuicao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitAtribuicao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribuicao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribuicaoContext atribuicao() {
		AtribuicaoContext _localctx = new AtribuicaoContext(Context, State);
		EnterRule(_localctx, 14, RULE_atribuicao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(ID);
			State = 83;
			Match(EQUAL);
			State = 84;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandoCondicionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SE() { return GetToken(PortugolParser.SE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PortugolParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PortugolParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTAO() { return GetToken(PortugolParser.ENTAO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoComandosContext[] blocoComandos() {
			return GetRuleContexts<BlocoComandosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoComandosContext blocoComandos(int i) {
			return GetRuleContext<BlocoComandosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SENAO() { return GetToken(PortugolParser.SENAO, 0); }
		public ComandoCondicionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comandoCondicional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterComandoCondicional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitComandoCondicional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComandoCondicional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandoCondicionalContext comandoCondicional() {
		ComandoCondicionalContext _localctx = new ComandoCondicionalContext(Context, State);
		EnterRule(_localctx, 16, RULE_comandoCondicional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(SE);
			State = 87;
			Match(LPAREN);
			State = 88;
			expr();
			State = 89;
			Match(RPAREN);
			State = 90;
			Match(ENTAO);
			State = 91;
			blocoComandos();
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SENAO) {
				{
				State = 92;
				Match(SENAO);
				State = 93;
				blocoComandos();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandoEnquantoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENQUANTO() { return GetToken(PortugolParser.ENQUANTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PortugolParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PortugolParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FACA() { return GetToken(PortugolParser.FACA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoComandosContext blocoComandos() {
			return GetRuleContext<BlocoComandosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIMENQUANTO() { return GetToken(PortugolParser.FIMENQUANTO, 0); }
		public ComandoEnquantoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comandoEnquanto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterComandoEnquanto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitComandoEnquanto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComandoEnquanto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandoEnquantoContext comandoEnquanto() {
		ComandoEnquantoContext _localctx = new ComandoEnquantoContext(Context, State);
		EnterRule(_localctx, 18, RULE_comandoEnquanto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(ENQUANTO);
			State = 97;
			Match(LPAREN);
			State = 98;
			expr();
			State = 99;
			Match(RPAREN);
			State = 100;
			Match(FACA);
			State = 101;
			blocoComandos();
			State = 102;
			Match(FIMENQUANTO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandoParaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARA() { return GetToken(PortugolParser.PARA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PortugolParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DE() { return GetToken(PortugolParser.DE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATE() { return GetToken(PortugolParser.ATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSO() { return GetToken(PortugolParser.PASSO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FACA() { return GetToken(PortugolParser.FACA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoComandosContext blocoComandos() {
			return GetRuleContext<BlocoComandosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIMPARA() { return GetToken(PortugolParser.FIMPARA, 0); }
		public ComandoParaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comandoPara; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterComandoPara(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitComandoPara(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComandoPara(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandoParaContext comandoPara() {
		ComandoParaContext _localctx = new ComandoParaContext(Context, State);
		EnterRule(_localctx, 20, RULE_comandoPara);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(PARA);
			State = 105;
			Match(ID);
			State = 106;
			Match(DE);
			State = 107;
			expr();
			State = 108;
			Match(ATE);
			State = 109;
			expr();
			State = 110;
			Match(PASSO);
			State = 111;
			expr();
			State = 112;
			Match(FACA);
			State = 113;
			blocoComandos();
			State = 114;
			Match(FIMPARA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandoSaidaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCREVA() { return GetToken(PortugolParser.ESCREVA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PortugolParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PortugolParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PortugolParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PortugolParser.COMMA, i);
		}
		public ComandoSaidaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comandoSaida; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterComandoSaida(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitComandoSaida(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComandoSaida(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandoSaidaContext comandoSaida() {
		ComandoSaidaContext _localctx = new ComandoSaidaContext(Context, State);
		EnterRule(_localctx, 22, RULE_comandoSaida);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(ESCREVA);
			State = 117;
			Match(LPAREN);
			State = 118;
			expr();
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 119;
				Match(COMMA);
				State = 120;
				expr();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocoComandosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INICIO() { return GetToken(PortugolParser.INICIO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComandosContext comandos() {
			return GetRuleContext<ComandosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIM() { return GetToken(PortugolParser.FIM, 0); }
		public BlocoComandosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocoComandos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterBlocoComandos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitBlocoComandos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocoComandos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocoComandosContext blocoComandos() {
		BlocoComandosContext _localctx = new BlocoComandosContext(Context, State);
		EnterRule(_localctx, 24, RULE_blocoComandos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(INICIO);
			State = 129;
			comandos();
			State = 130;
			Match(FIM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprLogicaContext exprLogica() {
			return GetRuleContext<ExprLogicaContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			exprLogica();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprLogicaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprRelacionalContext[] exprRelacional() {
			return GetRuleContexts<ExprRelacionalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprRelacionalContext exprRelacional(int i) {
			return GetRuleContext<ExprRelacionalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] E() { return GetTokens(PortugolParser.E); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode E(int i) {
			return GetToken(PortugolParser.E, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OU() { return GetTokens(PortugolParser.OU); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OU(int i) {
			return GetToken(PortugolParser.OU, i);
		}
		public ExprLogicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprLogica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterExprLogica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitExprLogica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLogica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprLogicaContext exprLogica() {
		ExprLogicaContext _localctx = new ExprLogicaContext(Context, State);
		EnterRule(_localctx, 28, RULE_exprLogica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			exprRelacional();
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==E || _la==OU) {
				{
				{
				State = 135;
				_la = TokenStream.LA(1);
				if ( !(_la==E || _la==OU) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 136;
				exprRelacional();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprRelacionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprAritmeticaContext[] exprAritmetica() {
			return GetRuleContexts<ExprAritmeticaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprAritmeticaContext exprAritmetica(int i) {
			return GetRuleContext<ExprAritmeticaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(PortugolParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(PortugolParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(PortugolParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(PortugolParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GE() { return GetTokens(PortugolParser.GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE(int i) {
			return GetToken(PortugolParser.GE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LE() { return GetTokens(PortugolParser.LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE(int i) {
			return GetToken(PortugolParser.LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQEQ() { return GetTokens(PortugolParser.EQEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ(int i) {
			return GetToken(PortugolParser.EQEQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEQ() { return GetTokens(PortugolParser.NEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ(int i) {
			return GetToken(PortugolParser.NEQ, i);
		}
		public ExprRelacionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprRelacional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterExprRelacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitExprRelacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprRelacional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprRelacionalContext exprRelacional() {
		ExprRelacionalContext _localctx = new ExprRelacionalContext(Context, State);
		EnterRule(_localctx, 30, RULE_exprRelacional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			exprAritmetica();
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8455716864L) != 0)) {
				{
				{
				State = 143;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8455716864L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 144;
				exprAritmetica();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprAritmeticaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermoContext[] termo() {
			return GetRuleContexts<TermoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermoContext termo(int i) {
			return GetRuleContext<TermoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(PortugolParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(PortugolParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(PortugolParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(PortugolParser.MINUS, i);
		}
		public ExprAritmeticaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprAritmetica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterExprAritmetica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitExprAritmetica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAritmetica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprAritmeticaContext exprAritmetica() {
		ExprAritmeticaContext _localctx = new ExprAritmeticaContext(Context, State);
		EnterRule(_localctx, 32, RULE_exprAritmetica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			termo();
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 151;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 152;
				termo();
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext[] fator() {
			return GetRuleContexts<FatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator(int i) {
			return GetRuleContext<FatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(PortugolParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(PortugolParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(PortugolParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(PortugolParser.DIV, i);
		}
		public TermoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterTermo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitTermo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermoContext termo() {
		TermoContext _localctx = new TermoContext(Context, State);
		EnterRule(_localctx, 34, RULE_termo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			fator();
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULT || _la==DIV) {
				{
				{
				State = 159;
				_la = TokenStream.LA(1);
				if ( !(_la==MULT || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 160;
				fator();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatorContext : ParserRuleContext {
		public FatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fator; } }
	 
		public FatorContext() { }
		public virtual void CopyFrom(FatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumeroContext : FatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_LITERAL() { return GetToken(PortugolParser.NUM_LITERAL, 0); }
		public NumeroContext(FatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterNumero(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitNumero(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanoContext : FatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LITERAL() { return GetToken(PortugolParser.BOOL_LITERAL, 0); }
		public BooleanoContext(FatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterBooleano(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitBooleano(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleano(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExprContext : FatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PortugolParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PortugolParser.RPAREN, 0); }
		public SubExprContext(FatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterSubExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitSubExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextoLiteralContext : FatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(PortugolParser.STRING_LITERAL, 0); }
		public TextoLiteralContext(FatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterTextoLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitTextoLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextoLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegacaoContext : FatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAO() { return GetToken(PortugolParser.NAO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator() {
			return GetRuleContext<FatorContext>(0);
		}
		public NegacaoContext(FatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterNegacao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitNegacao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegacao(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentificadorContext : FatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PortugolParser.ID, 0); }
		public IdentificadorContext(FatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.EnterIdentificador(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPortugolListener typedListener = listener as IPortugolListener;
			if (typedListener != null) typedListener.ExitIdentificador(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPortugolVisitor<TResult> typedVisitor = visitor as IPortugolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentificador(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FatorContext fator() {
		FatorContext _localctx = new FatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_fator);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				_localctx = new SubExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				Match(LPAREN);
				State = 167;
				expr();
				State = 168;
				Match(RPAREN);
				}
				break;
			case NAO:
				_localctx = new NegacaoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				Match(NAO);
				State = 171;
				fator();
				}
				break;
			case BOOL_LITERAL:
				_localctx = new BooleanoContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 172;
				Match(BOOL_LITERAL);
				}
				break;
			case NUM_LITERAL:
				_localctx = new NumeroContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 173;
				Match(NUM_LITERAL);
				}
				break;
			case STRING_LITERAL:
				_localctx = new TextoLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 174;
				Match(STRING_LITERAL);
				}
				break;
			case ID:
				_localctx = new IdentificadorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 175;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,45,179,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,1,1,1,1,1,1,1,1,2,4,2,52,8,2,11,2,12,2,53,1,3,1,3,1,3,1,3,3,3,60,8,
		3,1,3,1,3,1,4,1,4,1,5,1,5,4,5,68,8,5,11,5,12,5,69,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,3,6,81,8,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,3,8,95,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,5,11,122,8,
		11,10,11,12,11,125,9,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,
		14,1,14,5,14,138,8,14,10,14,12,14,141,9,14,1,15,1,15,1,15,5,15,146,8,15,
		10,15,12,15,149,9,15,1,16,1,16,1,16,5,16,154,8,16,10,16,12,16,157,9,16,
		1,17,1,17,1,17,5,17,162,8,17,10,17,12,17,165,9,17,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,3,18,177,8,18,1,18,0,0,19,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,0,5,1,0,20,23,1,0,17,18,1,0,27,32,
		1,0,34,35,1,0,36,37,178,0,38,1,0,0,0,2,46,1,0,0,0,4,51,1,0,0,0,6,55,1,
		0,0,0,8,63,1,0,0,0,10,67,1,0,0,0,12,80,1,0,0,0,14,82,1,0,0,0,16,86,1,0,
		0,0,18,96,1,0,0,0,20,104,1,0,0,0,22,116,1,0,0,0,24,128,1,0,0,0,26,132,
		1,0,0,0,28,134,1,0,0,0,30,142,1,0,0,0,32,150,1,0,0,0,34,158,1,0,0,0,36,
		176,1,0,0,0,38,39,5,1,0,0,39,40,5,42,0,0,40,41,5,38,0,0,41,42,5,39,0,0,
		42,43,3,2,1,0,43,44,5,4,0,0,44,45,5,0,0,1,45,1,1,0,0,0,46,47,5,2,0,0,47,
		48,3,10,5,0,48,49,5,3,0,0,49,3,1,0,0,0,50,52,3,6,3,0,51,50,1,0,0,0,52,
		53,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,5,1,0,0,0,55,56,3,8,4,0,56,59,
		5,42,0,0,57,58,5,33,0,0,58,60,3,26,13,0,59,57,1,0,0,0,59,60,1,0,0,0,60,
		61,1,0,0,0,61,62,5,40,0,0,62,7,1,0,0,0,63,64,7,0,0,0,64,9,1,0,0,0,65,68,
		3,6,3,0,66,68,3,12,6,0,67,65,1,0,0,0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,
		1,0,0,0,69,70,1,0,0,0,70,11,1,0,0,0,71,72,3,14,7,0,72,73,5,40,0,0,73,81,
		1,0,0,0,74,81,3,16,8,0,75,81,3,18,9,0,76,81,3,20,10,0,77,78,3,22,11,0,
		78,79,5,40,0,0,79,81,1,0,0,0,80,71,1,0,0,0,80,74,1,0,0,0,80,75,1,0,0,0,
		80,76,1,0,0,0,80,77,1,0,0,0,81,13,1,0,0,0,82,83,5,42,0,0,83,84,5,33,0,
		0,84,85,3,26,13,0,85,15,1,0,0,0,86,87,5,5,0,0,87,88,5,38,0,0,88,89,3,26,
		13,0,89,90,5,39,0,0,90,91,5,6,0,0,91,94,3,24,12,0,92,93,5,7,0,0,93,95,
		3,24,12,0,94,92,1,0,0,0,94,95,1,0,0,0,95,17,1,0,0,0,96,97,5,8,0,0,97,98,
		5,38,0,0,98,99,3,26,13,0,99,100,5,39,0,0,100,101,5,9,0,0,101,102,3,24,
		12,0,102,103,5,10,0,0,103,19,1,0,0,0,104,105,5,11,0,0,105,106,5,42,0,0,
		106,107,5,12,0,0,107,108,3,26,13,0,108,109,5,13,0,0,109,110,3,26,13,0,
		110,111,5,14,0,0,111,112,3,26,13,0,112,113,5,9,0,0,113,114,3,24,12,0,114,
		115,5,15,0,0,115,21,1,0,0,0,116,117,5,16,0,0,117,118,5,38,0,0,118,123,
		3,26,13,0,119,120,5,41,0,0,120,122,3,26,13,0,121,119,1,0,0,0,122,125,1,
		0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,
		126,127,5,39,0,0,127,23,1,0,0,0,128,129,5,2,0,0,129,130,3,10,5,0,130,131,
		5,3,0,0,131,25,1,0,0,0,132,133,3,28,14,0,133,27,1,0,0,0,134,139,3,30,15,
		0,135,136,7,1,0,0,136,138,3,30,15,0,137,135,1,0,0,0,138,141,1,0,0,0,139,
		137,1,0,0,0,139,140,1,0,0,0,140,29,1,0,0,0,141,139,1,0,0,0,142,147,3,32,
		16,0,143,144,7,2,0,0,144,146,3,32,16,0,145,143,1,0,0,0,146,149,1,0,0,0,
		147,145,1,0,0,0,147,148,1,0,0,0,148,31,1,0,0,0,149,147,1,0,0,0,150,155,
		3,34,17,0,151,152,7,3,0,0,152,154,3,34,17,0,153,151,1,0,0,0,154,157,1,
		0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,33,1,0,0,0,157,155,1,0,0,0,158,
		163,3,36,18,0,159,160,7,4,0,0,160,162,3,36,18,0,161,159,1,0,0,0,162,165,
		1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,35,1,0,0,0,165,163,1,0,0,0,
		166,167,5,38,0,0,167,168,3,26,13,0,168,169,5,39,0,0,169,177,1,0,0,0,170,
		171,5,19,0,0,171,177,3,36,18,0,172,177,5,24,0,0,173,177,5,25,0,0,174,177,
		5,26,0,0,175,177,5,42,0,0,176,166,1,0,0,0,176,170,1,0,0,0,176,172,1,0,
		0,0,176,173,1,0,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,37,1,0,0,0,12,
		53,59,67,69,80,94,123,139,147,155,163,176
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
